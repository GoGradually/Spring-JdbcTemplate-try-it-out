plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'jdbc'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // DB 연결 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    // 웹 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // 문서화 의존성 추가
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'

    // 모니터링 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // 테스트 의존성 추가
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.named('jacocoTestReport') {
    dependsOn test
    reports {
        xml.required = true
        html.required = false
    }

    // 테스트 커버리지 검증에 제외할 디렉토리/클래스 설정
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                '**/*Dto.class',
                '**/*Request.class',
                '**/*Response.class',
                'jdbc/board/config/**'
        ])
    }))
}
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    violationRules {

        // 기본 규칙 (모든 클래스에 적용)
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60 // 예: 프로젝트 전체 최소 라인 커버리지 70%
            }
        }

        // 도메인 테스트 커버리지
        rule {
            element = 'PACKAGE'
            includes = ['jdbc.board.domain']
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }

        // 애플리케이션 테스트 커버리지
        rule {
            element = 'PACKAGE'
            includes = ['jdbc.board.application']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70 // 예: Service 레이어는 85%
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification